// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ELiteratureDbContext))]
    [Migration("20250409184628_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.LiteratureDirection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EndCentury")
                        .HasColumnType("bigint");

                    b.Property<long>("StartCentury")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiteratureDirections");
                });

            modelBuilder.Entity("Data.Entities.Occupation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("Data.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Data.Entities.Photo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasDiscriminator().HasValue("Photo");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Data.Entities.Publication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("PublicationYear")
                        .HasColumnType("date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("Data.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Data.Entities.Writer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateOfDeath")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Writers");
                });

            modelBuilder.Entity("LiteratureDirectionPublication", b =>
                {
                    b.Property<long>("LiteratureDirectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicationsId")
                        .HasColumnType("bigint");

                    b.HasKey("LiteratureDirectionId", "PublicationsId");

                    b.HasIndex("PublicationsId");

                    b.ToTable("LiteratureDirectionPublication");
                });

            modelBuilder.Entity("LiteratureDirectionWriter", b =>
                {
                    b.Property<long>("LiteratureDirectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("WritersId")
                        .HasColumnType("bigint");

                    b.HasKey("LiteratureDirectionId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("LiteratureDirectionWriter");
                });

            modelBuilder.Entity("OccupationWriter", b =>
                {
                    b.Property<long>("OccupationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("WritersId")
                        .HasColumnType("bigint");

                    b.HasKey("OccupationsId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("OccupationWriter");
                });

            modelBuilder.Entity("OrganizationWriter", b =>
                {
                    b.Property<long>("OrganizationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("WritersId")
                        .HasColumnType("bigint");

                    b.HasKey("OrganizationsId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("OrganizationWriter");
                });

            modelBuilder.Entity("PublicationTag", b =>
                {
                    b.Property<long>("PublicationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagsId")
                        .HasColumnType("bigint");

                    b.HasKey("PublicationsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PublicationTag");
                });

            modelBuilder.Entity("PublicationWriter", b =>
                {
                    b.Property<long>("PublicationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("WritersId")
                        .HasColumnType("bigint");

                    b.HasKey("PublicationsId", "WritersId");

                    b.HasIndex("WritersId");

                    b.ToTable("PublicationWriter");
                });

            modelBuilder.Entity("Data.Entities.PublicationPhoto", b =>
                {
                    b.HasBaseType("Data.Entities.Photo");

                    b.Property<long>("PublicationId")
                        .HasColumnType("bigint");

                    b.HasIndex("PublicationId");

                    b.HasDiscriminator().HasValue("PublicationPhoto");
                });

            modelBuilder.Entity("Data.Entities.WriterPhoto", b =>
                {
                    b.HasBaseType("Data.Entities.Photo");

                    b.Property<string>("Quote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WriterId")
                        .HasColumnType("bigint");

                    b.HasIndex("WriterId");

                    b.HasDiscriminator().HasValue("WriterPhoto");
                });

            modelBuilder.Entity("LiteratureDirectionPublication", b =>
                {
                    b.HasOne("Data.Entities.LiteratureDirection", null)
                        .WithMany()
                        .HasForeignKey("LiteratureDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiteratureDirectionWriter", b =>
                {
                    b.HasOne("Data.Entities.LiteratureDirection", null)
                        .WithMany()
                        .HasForeignKey("LiteratureDirectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OccupationWriter", b =>
                {
                    b.HasOne("Data.Entities.Occupation", null)
                        .WithMany()
                        .HasForeignKey("OccupationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganizationWriter", b =>
                {
                    b.HasOne("Data.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicationTag", b =>
                {
                    b.HasOne("Data.Entities.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PublicationWriter", b =>
                {
                    b.HasOne("Data.Entities.Publication", null)
                        .WithMany()
                        .HasForeignKey("PublicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Writer", null)
                        .WithMany()
                        .HasForeignKey("WritersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.PublicationPhoto", b =>
                {
                    b.HasOne("Data.Entities.Publication", "Publication")
                        .WithMany("Photos")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publication");
                });

            modelBuilder.Entity("Data.Entities.WriterPhoto", b =>
                {
                    b.HasOne("Data.Entities.Writer", "Writer")
                        .WithMany("Photos")
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Data.Entities.Publication", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Data.Entities.Writer", b =>
                {
                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
